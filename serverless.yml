service: shellbot-lambda

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 1024
  timeout: 600
  environment:
    PINECONE_API_KEY: ${file(.env.json):PINECONE_API_KEY}
    BUCKET_NAME_FOR_KB: ${file(.env.json):BUCKET_NAME_FOR_KB}
    REGION_FOR_BEDROCK: ${file(.env.json):REGION_FOR_BEDROCK}
    ACCESS_KEY_ID_AWS: ${file(.env.json):ACCESS_KEY_ID_AWS}
    SECRET_ACCESS_KEY_AWS: ${file(.env.json):SECRET_ACCESS_KEY_AWS}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource: "arn:aws:s3:::${file(.env.json):BUCKET_NAME_FOR_KB}/*"
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource: "*"
        - Effect: Allow
          Action:
            - bedrock:InvokeModel
          Resource: arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v1

  apiGateway:
    binaryMediaTypes:
      - "*/*"

package:
  individually: true

functions:
  askQuestion:
    handler: src/handlers/askQuestion.handler
    events:
      - http:
          path: askQuestion
          method: post
          cors: true
  addKnowledgebase:
    handler: src/handlers/addKnowledgebase.handler
    events:
      - http:
          path: addKnowledgebase
          method: post
          cors: true
  updateAnswer:
    handler: src/handlers/updateAnswer.handler
    events:
      - http:
          path: updateAnswer
          method: post
          cors: true
  enhanceQuestion:
    handler: src/handlers/enhanceQuestion.handler
    events:
      - http:
          path: enhanceQuestion
          method: post
          cors: true

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
